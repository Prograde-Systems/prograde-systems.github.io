---
title: "Altimeter Constant Acceleration Kalman Filter"
author: "Jack Johnston"
date: today
format:
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-tools: true
    theme: cosmo  # Or another clean theme
bibliography: ../references.bib
# csl: ../ieee.csl  # Optional if you want specific citation styling
freeze: auto
---



## Overview
- Purpose of the filter: estimating vertical position, velocity, and acceleration from altimeter measurements
- Context of use (e.g., onboard state estimation for a rocket launch)
- Summary of the model: 1D, constant acceleration, discrete-time Kalman filter

## System Model

### State Vector
- Description of the state components:
  - Position (altitude above launch site)
  - Velocity (vertical speed)
  - Acceleration (vertical acceleration)

### Process Model
- Assumes constant acceleration
- Time-varying state transition matrix (dependent on `dt`)
- Includes process noise applied to the acceleration component

### Measurement Model
- Single altimeter measurement (position only)
- Altimeter bias removed using a tare procedure before flight

## Filter Structure

### Initialization
- Zero initial state vector
- Identity covariance matrix
- Altimeter noise and process noise as tunable parameters
- Tare buffer logic to determine launch altitude

### Prediction Step
- Computes time step `dt` from system time
- Applies constant-acceleration state transition
- Updates state estimate and error covariance
- Uses time-dependent process noise matrix

### Update Step
- Waits until the tare phase completes before accepting updates
- Adjusts altimeter reading relative to launch altitude
- Updates estimate using Kalman gain
- Uses the Joseph form to update the covariance matrix for numerical stability

## Tare Mechanism
- Collects a fixed number of samples before launch
- Computes average to establish the zero-altitude reference (ASL)
- Filters are only applied after tare is complete

## Parameters and Tuning
- `altimeter_noise_std`: defines measurement noise
- `process_noise_cov_acc`: variance for acceleration noise
- `tare_sample_count`: number of samples used for tare averaging

## Example Usage
- Description of how to integrate into a loop or system
- Requirements for time input and measurement format
- Notes on synchronization and timekeeping

## Limitations
- Assumes motion along a single vertical axis
- Sensitive to poorly tuned noise parameters
- Requires consistent time steps for accurate prediction

## Future Improvements
- Fuse additional sensors (e.g., IMU) using an Extended Kalman Filter
- Automatically detect launch rather than using a fixed tare sample count
- Add support for non-uniform sampling or robust noise adaptation

## Appendix

### Class Summary
- `AltimeterCAKF`: main filter class
  - `predict(time)`
  - `update(measurement)`
  - `get_process_noise_matrix(dt)`

### Code Snippet
- Link or reference to full implementation file (e.g., GitHub repo or `altimeter_cakf.py`)
