[
  {
    "objectID": "quarto_guide.html",
    "href": "quarto_guide.html",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "This guide explains how to edit, preview, render, and publish the documentation site using Quarto.\n\n\n\nIf Quarto is not installed, run:\nwget https://quarto.org/download/latest/quarto-linux-amd64.deb\nsudo apt install ./quarto-linux-amd64.deb\nTo check the installation:\nquarto --version\n\n\n\n\nSite content is written in .qmd files:\n\nindex.qmd: Main landing page\nabout.qmd: Information about the team or organisation\nnavigation/*.qmd: Technical documentation pages\n\nUse standard Markdown with optional LaTeX-style math and code blocks.\n\n\n\n\nTo live-preview the site locally as you edit:\nquarto preview\nThis starts a local server (usually at http://localhost:4200) and refreshes automatically when files are saved.\n\n\n\n\nTo build the static site into the _site/ directory:\nquarto render\nThis creates the final HTML version of the site locally.\n\n\n\n\nTo deploy the site to GitHub Pages (gh-pages branch):\nquarto publish gh-pages\nWhen prompted, confirm with Y.\nLive site URL:\nhttps://prograde-systems.github.io\n\n\n\n\nThe following should be excluded from version control via .gitignore:\n_site/\n.quarto/\n*.deb\nOnly commit source files like .qmd, .css, _quarto.yml, and assets (e.g. images, diagrams).\n\n\n\n\n\nQuarto Docs: https://quarto.org/docs/\nMarkdown Reference: https://quarto.org/docs/authoring/markdown-basics.html\nMath and Equations: https://quarto.org/docs/authoring/markdown-basics.html#equations"
  },
  {
    "objectID": "quarto_guide.html#setup",
    "href": "quarto_guide.html#setup",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "If Quarto is not installed, run:\nwget https://quarto.org/download/latest/quarto-linux-amd64.deb\nsudo apt install ./quarto-linux-amd64.deb\nTo check the installation:\nquarto --version"
  },
  {
    "objectID": "quarto_guide.html#editing-content",
    "href": "quarto_guide.html#editing-content",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "Site content is written in .qmd files:\n\nindex.qmd: Main landing page\nabout.qmd: Information about the team or organisation\nnavigation/*.qmd: Technical documentation pages\n\nUse standard Markdown with optional LaTeX-style math and code blocks."
  },
  {
    "objectID": "quarto_guide.html#preview-the-site",
    "href": "quarto_guide.html#preview-the-site",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "To live-preview the site locally as you edit:\nquarto preview\nThis starts a local server (usually at http://localhost:4200) and refreshes automatically when files are saved."
  },
  {
    "objectID": "quarto_guide.html#render-the-site",
    "href": "quarto_guide.html#render-the-site",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "To build the static site into the _site/ directory:\nquarto render\nThis creates the final HTML version of the site locally."
  },
  {
    "objectID": "quarto_guide.html#publish-to-github-pages",
    "href": "quarto_guide.html#publish-to-github-pages",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "To deploy the site to GitHub Pages (gh-pages branch):\nquarto publish gh-pages\nWhen prompted, confirm with Y.\nLive site URL:\nhttps://prograde-systems.github.io"
  },
  {
    "objectID": "quarto_guide.html#repository-cleanliness",
    "href": "quarto_guide.html#repository-cleanliness",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "The following should be excluded from version control via .gitignore:\n_site/\n.quarto/\n*.deb\nOnly commit source files like .qmd, .css, _quarto.yml, and assets (e.g. images, diagrams)."
  },
  {
    "objectID": "quarto_guide.html#further-resources",
    "href": "quarto_guide.html#further-resources",
    "title": "Quarto Documentation Guide",
    "section": "",
    "text": "Quarto Docs: https://quarto.org/docs/\nMarkdown Reference: https://quarto.org/docs/authoring/markdown-basics.html\nMath and Equations: https://quarto.org/docs/authoring/markdown-basics.html#equations"
  },
  {
    "objectID": "docs/navigation/index.html",
    "href": "docs/navigation/index.html",
    "title": "Navigation Algorithms",
    "section": "",
    "text": "Navigation Overview\nThis section covers sensor fusion, filtering, and guidance systems used in Prograde Systems vehicles."
  },
  {
    "objectID": "docs/about.html",
    "href": "docs/about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html",
    "href": "docs/navigation/altimeter_only_kf.html",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "",
    "text": "The objective of this filter is to estimate the vertical position, velocity, and acceleration of a rocket in real time using altimeter data. These estimates are critical for detecting key flight events such as launch, burnout, apogee, and landing.\nThe proposed filter operates under a one-dimensional (1D) model of rocket flight and assumes constant acceleration between discrete time steps. A discrete-time Kalman filter is employed to integrate sensor measurements and generate robust state estimates throughout the rocket’s flight.\nThe system is designed to work with a barometric altimeter, sampling at a variable rate, and accounting for zero mean Gaussian barometer sensor noise.\nThe filter is designed to run on a resource-constrained microcontroller as part of a rocket’s flight computer, enabling onboard, real-time processing. Its outputs can used to trigger events such as parachute deployment and to provide reliable telemetry for post-flight analysis.\nBy balancing simplicity with performance, this filter provides a lightweight yet effective solution for real-time rocket flight state estimation."
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#overview",
    "href": "docs/navigation/altimeter_only_kf.html#overview",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "",
    "text": "The objective of this filter is to estimate the vertical position, velocity, and acceleration of a rocket in real time using altimeter data. These estimates are critical for detecting key flight events such as launch, burnout, apogee, and landing.\nThe proposed filter operates under a one-dimensional (1D) model of rocket flight and assumes constant acceleration between discrete time steps. A discrete-time Kalman filter is employed to integrate sensor measurements and generate robust state estimates throughout the rocket’s flight.\nThe system is designed to work with a barometric altimeter, sampling at a variable rate, and accounting for zero mean Gaussian barometer sensor noise.\nThe filter is designed to run on a resource-constrained microcontroller as part of a rocket’s flight computer, enabling onboard, real-time processing. Its outputs can used to trigger events such as parachute deployment and to provide reliable telemetry for post-flight analysis.\nBy balancing simplicity with performance, this filter provides a lightweight yet effective solution for real-time rocket flight state estimation."
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#system-model",
    "href": "docs/navigation/altimeter_only_kf.html#system-model",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "2 System Model",
    "text": "2 System Model\n\n2.1 State Vector\nThe state vector, \\(\\mathbf{x}\\), contains the key states for which the Kalman Filter generates estimates.\n\\[\\mathbf{x}_k = \\begin{bmatrix}h \\\\ \\dot{h}\\\\ \\ddot{h} \\end{bmatrix}\\]\nWhere,\n\n\\(h\\) is altitude.\n\\(\\dot{h}\\) is vertical velocity.\n\\(\\ddot{h}\\) is vertical acceleration.\n\n\n\n2.2 Process Model\nThis filter eploys the constant acceleration process model, meaning that in between measurement updates the acceleration is assumed to be constant.\nThe process model is derived from the kinematic equations of motion:\n\\[\\frac{d}{dt} \\begin{bmatrix}h(t) \\\\ \\dot{h}(t)\\\\ \\ddot{h}(t)\\end{bmatrix} = \\begin{bmatrix}\\dot{h}(t) \\\\ \\ddot{h}(t) \\\\ 0\\end{bmatrix}\\]\nThe system can be expressed in matrix form as a continuous-time linear differential equation:\n\\[\n\\frac{d \\mathbf{x}(t)}{dt} = \\mathbf{A} \\mathbf{x}(t),\n\\quad \\text{where} \\quad\n\\mathbf{A} =\n\\begin{bmatrix}\n0 & 1 & 0 \\\\\n0 & 0 & 1 \\\\\n0 & 0 & 0\n\\end{bmatrix}\n\\]\nTo apply this model in a discrete-time Kalman Filter, it must be discretised over a timestep \\(\\Delta t\\), resulting in a state transition matrix \\(\\mathbf{F}_k\\). This discretisation is derived using the matrix exponential of the continuous-time system matrix \\(\\mathbf{A}\\):\n\\[\n\\mathbf{F}_k = e^{\\mathbf{A} \\Delta t}\n\\]\nFor this system, \\(\\mathbf{A}\\) is a nilpotent matrix (i.e., \\(\\mathbf{A}^3 = 0\\)), so the matrix exponential can be computed exactly using a truncated Taylor series:\n\\[\ne^{\\mathbf{A} \\Delta t} = \\mathbf{I} + \\mathbf{A} \\Delta t + \\frac{1}{2!} \\mathbf{A}^2 \\Delta t^2\n\\]\nCalculating the terms:\n\\[\n\\mathbf{A} =\n\\begin{bmatrix}\n0 & 1 & 0 \\\\\n0 & 0 & 1 \\\\\n0 & 0 & 0\n\\end{bmatrix}, \\quad\n\\mathbf{A}^2 =\n\\begin{bmatrix}\n0 & 0 & 1 \\\\\n0 & 0 & 0 \\\\\n0 & 0 & 0\n\\end{bmatrix}, \\quad\n\\mathbf{A}^3 = \\mathbf{0}\n\\]\nSubstituting into the series:\n\\[\n\\mathbf{F}_k = \\mathbf{I} + \\mathbf{A} \\Delta t + \\frac{1}{2} \\mathbf{A}^2 \\Delta t^2 =\n\\begin{bmatrix}\n1 & \\Delta t & \\frac{1}{2} \\Delta t^2 \\\\\n0 & 1 & \\Delta t \\\\\n0 & 0 & 1\n\\end{bmatrix}\n\\]\nThus, the discrete-time process model becomes:\n\\[\n\\mathbf{x}_k = \\mathbf{F}_k \\mathbf{x}_{k-1} + \\mathbf{w}_{k-1}\n\\]\nWhere \\(\\mathbf{w}_{k-1} \\sim \\mathcal{N}(0, \\mathbf{Q}_k)\\) is the process noise, which models uncertainty in the acceleration dynamics.\nIn the discrete-time process model:\n\\[\n\\mathbf{x}_k = \\mathbf{F}_k \\mathbf{x}_{k-1} + \\mathbf{w}_{k-1}\n\\]\nthe process noise \\(\\mathbf{w}_{k-1} \\sim \\mathcal{N}(0, \\mathbf{Q}_k)\\) accounts for uncertainty in the system dynamics - primarily unmodelled forces or variability in acceleration.\nWe assume the noise enters through the acceleration term only, meaning the system is affected by a continuous-time white noise acceleration input with variance \\(\\sigma_a^2\\). This leads to a discrete-time process noise covariance matrix \\(\\mathbf{Q}_k\\) derived using the following:\n\\[\n\\mathbf{Q}_k = \\int_0^{\\Delta t} e^{\\mathbf{A} \\tau} \\mathbf{G} \\mathbf{Q}_c \\mathbf{G}^T e^{\\mathbf{A}^T \\tau} d\\tau\n\\]\nWhere: - \\(\\mathbf{A}\\) is the continuous-time system matrix, - \\(\\mathbf{G}\\) is the noise input matrix, - \\(\\mathbf{Q}_c = \\sigma_a^2\\) is the continuous-time noise intensity (scalar), - \\(\\Delta t\\) is the time step.\nFor a system with noise entering only through acceleration:\n\\[\n\\mathbf{G} =\n\\begin{bmatrix}\n0 \\\\\n0 \\\\\n1\n\\end{bmatrix}\n\\]\nFollowing the derivation (or by using known results for a constant-acceleration model), the resulting discrete-time process noise covariance matrix is:\n\\[\n\\mathbf{Q}_k =\n\\sigma_a^2\n\\begin{bmatrix}\n\\frac{1}{4} \\Delta t^4 & \\frac{1}{2} \\Delta t^3 & \\frac{1}{2} \\Delta t^2 \\\\\n\\frac{1}{2} \\Delta t^3 & \\Delta t^2 & \\Delta t \\\\\n\\frac{1}{2} \\Delta t^2 & \\Delta t & 1\n\\end{bmatrix}\n\\]\nThis matrix captures how acceleration noise propagates into uncertainty in position and velocity over time.\n\n\n2.3 Measurement Model\n\nSingle altimeter measurement (position only)\nAltimeter bias removed using a tare procedure before flight"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#filter-structure",
    "href": "docs/navigation/altimeter_only_kf.html#filter-structure",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "3 Filter Structure",
    "text": "3 Filter Structure\n\n3.1 Initialization\n\nZero initial state vector\nIdentity covariance matrix\nAltimeter noise and process noise as tunable parameters\nTare buffer logic to determine launch altitude\n\n\n\n3.2 Prediction Step\n\nComputes time step dt from system time\nApplies constant-acceleration state transition\nUpdates state estimate and error covariance\nUses time-dependent process noise matrix\n\n\n\n3.3 Update Step\n\nWaits until the tare phase completes before accepting updates\nAdjusts altimeter reading relative to launch altitude\nUpdates estimate using Kalman gain\nUses the Joseph form to update the covariance matrix for numerical stability"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#tare-mechanism",
    "href": "docs/navigation/altimeter_only_kf.html#tare-mechanism",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "4 Tare Mechanism",
    "text": "4 Tare Mechanism\n\nCollects a fixed number of samples before launch\nComputes average to establish the zero-altitude reference (ASL)\nFilters are only applied after tare is complete"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#parameters-and-tuning",
    "href": "docs/navigation/altimeter_only_kf.html#parameters-and-tuning",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "5 Parameters and Tuning",
    "text": "5 Parameters and Tuning\n\naltimeter_noise_std: defines measurement noise\nprocess_noise_cov_acc: variance for acceleration noise\ntare_sample_count: number of samples used for tare averaging"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#example-usage",
    "href": "docs/navigation/altimeter_only_kf.html#example-usage",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "6 Example Usage",
    "text": "6 Example Usage\n\nDescription of how to integrate into a loop or system\nRequirements for time input and measurement format\nNotes on synchronization and timekeeping"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#limitations",
    "href": "docs/navigation/altimeter_only_kf.html#limitations",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "7 Limitations",
    "text": "7 Limitations\n\nBarometric readings\nVent hole sizing\nSupersonic effects"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#future-improvements",
    "href": "docs/navigation/altimeter_only_kf.html#future-improvements",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "8 Future Improvements",
    "text": "8 Future Improvements\n\nFuse additional sensors (e.g., IMU) using an Extended Kalman Filter\nAutomatically detect launch rather than using a fixed tare sample count\nAdd support for non-uniform sampling or robust noise adaptation"
  },
  {
    "objectID": "docs/navigation/altimeter_only_kf.html#appendix",
    "href": "docs/navigation/altimeter_only_kf.html#appendix",
    "title": "Altimeter Constant Acceleration Kalman Filter",
    "section": "9 Appendix",
    "text": "9 Appendix\n\n9.1 Class Summary\n\nAltimeterCAKF: main filter class\n\npredict(time)\nupdate(measurement)\nget_process_noise_matrix(dt)\n\n\n\n\n9.2 Code Snippet\n\nLink or reference to full implementation file (e.g., GitHub repo or altimeter_cakf.py)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Prograde Systems",
    "section": "",
    "text": "Prograde Systems is an open-source, collaborative initiative focused on experimental rocketry and independent aerospace research. Our mission is to develop and share high-quality tools, designs, and knowledge that support advanced rocketry and avionics projects.\nThis site serves as the central hub for our documentation efforts. It includes detailed technical articles, reference materials, and development notes covering a range of topics including flight computer design, navigation and control software, and systems integration.\nBy publishing our work openly, we aim to create a transparent and reusable foundation for student teams, independent researchers, and contributors interested in building robust, modern rocketry systems."
  }
]